/* vim: set expandtab filetype=haskell : */

tempo = 120 ;

song = let 
    h = scaleTime 0.5 ; d = scaleTime 2 ; r = repeat 2 ;
    w = scaleVelocity 0.4 ; s = scaleVelocity 10 ;

    part1 = [
      { [ 1 1 3 3 | 5 5 (3,2) | 4  4 2 2  | _7 _7 (0,2) ]
       _[ @r[ {3 1} 0 (0,2) ] | 5 0 (0,2) | 5 0  (5,2)  ] }

      { [ 1 1 3 3 | 5 5 (3,2) | { [^1 ^1 #4 #4]
                                  [#4  0 (0,2)] } ] 
       _[ @r[ {3 1} 0 (0,2) ] |     2 0 2 0       ] }
    ] ;

    part1a = {
      [ (5,2) (0,2) ]
     _[ (5,2) _5 0  ]
    } ;

    part1b = {
      [ (5,2) @s{7 5} 0 ]
     _[ (5,2) @s _5   0 ]
    } ;

    part2 = [
      { [ (4,2) (3,2) |  2  2 @h[2  3 4 5] | 6 5 4 3 |    2 2 2 #2   ]
       _[  2 5   1 5  | _7 _7 @h[_7 1 2 3] | 4 3 2 1 | { [5 5 5  0]
                                                        _[7 7 7  0] } ] }

      { [ 3 3 5 5       | ^1 ^1 (^3,2)  | ^2 ^2 @h[^1 7 6 7] | { [^1 ^1 ^1 0]
                                                                 [ 3  3  3 0] } ]
       _[ {5 1} 0 (0,2) | {5 3} 0 (0,2) | {4 5} 0 {4 5} 0    |     1  1  1 0    ] }
    ] ;

    in w [ part1 part1a part1 part1b part2 ] ;

repeat times m =
    if (== times 0)
        []
        (seq m (repeat (- times 1) m)) ;

scaleTime ratio =
    let go n =
        if (number? n)
            (n, ratio)
        (if (note? n)
            (pitch n, * ratio (time n), velocity n)
        {"half : not a note" n})
    in mapMelody go ;

scaleVelocity ratio =
    let go n =
        if (number? n)
            (n, 1, ratio)
        (if (note? n)
            (pitch n, time n, * ratio (velocity n))
            "decreaseVelocity : not a note")
    in mapMelody go ;

mapMelody f m =
    if (number? m)
        (f m)
    (if (note? m)
        (f m)
    (if (seq? m)
        (if (nil? m)
            []
        (seq (mapMelody f (car m)) (mapMelody f (cdr m))))
    (if (par? m)
        (if (nil? m)
            {}
        (par (mapMelody f (car m)) (mapMelody f (cdr m))))
    {"mapMelody : not a melody" m}))) ;
